{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kuany\\\\WebstormProjects\\\\myproject\\\\client\\\\src\\\\pages\\\\components\\\\Editable.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\"; // Component accept text, placeholder values and also pass what type of Input - input, textarea so that we can use it for styling accordingly\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Editable = ({\n  text,\n  type,\n  placeholder,\n  children,\n  ...props\n}) => {\n  _s();\n\n  // Manage the state whether to show the label or the input box. By default, label will be shown.\n  // Exercise: It can be made dynamic by accepting initial state as props outside the component\n  const [isEditing, setEditing] = useState(true); // Event handler while pressing any key while editing\n\n  const handleKeyDown = (event, type) => {// Handle when key is pressed\n  };\n  /*\r\n  - It will display a label is `isEditing` is false\r\n  - It will display the children (input or textarea) if `isEditing` is true\r\n  - when input `onBlur`, we will set the default non edit mode\r\n  Note: For simplicity purpose, I removed all the classnames, you can check the repo for CSS styles\r\n  */\n\n\n  return /*#__PURE__*/_jsxDEV(\"section\", { ...props,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      onClick: () => setEditing(true),\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: text || placeholder || \"Editable content\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Editable, \"+EX09p6eTEZQpI42FWUnMs+8D6A=\");\n\n_c = Editable;\nexport default Editable;\n\nvar _c;\n\n$RefreshReg$(_c, \"Editable\");","map":{"version":3,"sources":["C:/Users/kuany/WebstormProjects/myproject/client/src/pages/components/Editable.js"],"names":["React","useState","Editable","text","type","placeholder","children","props","isEditing","setEditing","handleKeyDown","event"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC,C,CAEA;;;;AACA,MAAMC,QAAQ,GAAG,CAAC;AACIC,EAAAA,IADJ;AAEIC,EAAAA,IAFJ;AAGIC,EAAAA,WAHJ;AAIIC,EAAAA,QAJJ;AAKI,KAAGC;AALP,CAAD,KAMO;AAAA;;AACpB;AACJ;AACI,QAAM,CAACC,SAAD,EAAYC,UAAZ,IAA0BR,QAAQ,CAAC,IAAD,CAAxC,CAHoB,CAKxB;;AACI,QAAMS,aAAa,GAAG,CAACC,KAAD,EAAQP,IAAR,KAAiB,CACnC;AACH,GAFD;AAIA;AACJ;AACA;AACA;AACA;AACA;;;AACI,sBACI,wBAAaG,KAAb;AAAA,2BACI;AACI,MAAA,OAAO,EAAE,MAAME,UAAU,CAAC,IAAD,CAD7B;AAAA,6BAGI;AAAA,kBACKN,IAAI,IAAIE,WAAR,IAAuB;AAD5B;AAAA;AAAA;AAAA;AAAA;AAHJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAWH,CAjCD;;GAAMH,Q;;KAAAA,Q;AAmCN,eAAeA,QAAf","sourcesContent":["import React, { useState } from \"react\";\r\n\r\n// Component accept text, placeholder values and also pass what type of Input - input, textarea so that we can use it for styling accordingly\r\nconst Editable = ({\r\n                      text,\r\n                      type,\r\n                      placeholder,\r\n                      children,\r\n                      ...props\r\n                  }) => {\r\n    // Manage the state whether to show the label or the input box. By default, label will be shown.\r\n// Exercise: It can be made dynamic by accepting initial state as props outside the component\r\n    const [isEditing, setEditing] = useState(true);\r\n\r\n// Event handler while pressing any key while editing\r\n    const handleKeyDown = (event, type) => {\r\n        // Handle when key is pressed\r\n    };\r\n\r\n    /*\r\n    - It will display a label is `isEditing` is false\r\n    - It will display the children (input or textarea) if `isEditing` is true\r\n    - when input `onBlur`, we will set the default non edit mode\r\n    Note: For simplicity purpose, I removed all the classnames, you can check the repo for CSS styles\r\n    */\r\n    return (\r\n        <section {...props}>\r\n            <div\r\n                onClick={() => setEditing(true)}\r\n            >\r\n                <span>\r\n                    {text || placeholder || \"Editable content\"}\r\n                </span>\r\n            </div>\r\n        </section>\r\n    );\r\n};\r\n\r\nexport default Editable;\r\n"]},"metadata":{},"sourceType":"module"}