{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kuany\\\\WebstormProjects\\\\myproject\\\\client\\\\src\\\\pages\\\\ShowText.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useCallback, useContext } from \"react\";\nimport { AuthContext } from \"../context/AuthContext\";\nimport { useHttp } from \"../hooks/http.hook\";\nimport { Loader } from \"./components/Loader\";\nimport { TextListCards } from \"./components/TextListCards\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const ShowText = () => {\n  _s();\n\n  const {\n    request,\n    loading\n  } = useHttp();\n  const {\n    texts,\n    setTexts\n  } = useState(null);\n  const {\n    wait,\n    setWait\n  } = useState(true);\n  const {\n    token\n  } = useContext(AuthContext);\n\n  const getAllTexts = async () => {\n    try {\n      const fetched = await request('/api/text/', 'GET', null, {\n        Authorization: 'Bearer ' + token\n      });\n      setTexts(fetched);\n      setWait(false);\n      return fetched;\n    } catch (e) {}\n  };\n\n  useEffect(() => {\n    const data = getAllTexts();\n    console.log(data);\n  }, [getAllTexts]);\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 16\n    }, this);\n  } //  {!loading && <TextListCards texts={texts} />}\n\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n};\n\n_s(ShowText, \"fZyscxlJPYqhInHyvIHy5qra8ic=\", false, function () {\n  return [useHttp];\n});\n\n_c = ShowText;\n\nvar _c;\n\n$RefreshReg$(_c, \"ShowText\");","map":{"version":3,"sources":["C:/Users/kuany/WebstormProjects/myproject/client/src/pages/ShowText.js"],"names":["React","useEffect","useState","useCallback","useContext","AuthContext","useHttp","Loader","TextListCards","ShowText","request","loading","texts","setTexts","wait","setWait","token","getAllTexts","fetched","Authorization","e","data","console","log"],"mappings":";;;AAAA,OAAOA,KAAP,IAAcC,SAAd,EAAwBC,QAAxB,EAAiCC,WAAjC,EAA6CC,UAA7C,QAA8D,OAA9D;AACA,SAAQC,WAAR,QAA0B,wBAA1B;AACA,SAAQC,OAAR,QAAsB,oBAAtB;AACA,SAAQC,MAAR,QAAqB,qBAArB;AACA,SAAQC,aAAR,QAA4B,4BAA5B;;;AAEA,OAAO,MAAMC,QAAQ,GAAG,MAAM;AAAA;;AAC1B,QAAM;AAACC,IAAAA,OAAD;AAASC,IAAAA;AAAT,MAAoBL,OAAO,EAAjC;AACA,QAAM;AAACM,IAAAA,KAAD;AAAOC,IAAAA;AAAP,MAAmBX,QAAQ,CAAC,IAAD,CAAjC;AACA,QAAM;AAACY,IAAAA,IAAD;AAAMC,IAAAA;AAAN,MAAiBb,QAAQ,CAAC,IAAD,CAA/B;AACA,QAAM;AAACc,IAAAA;AAAD,MAAUZ,UAAU,CAACC,WAAD,CAA1B;;AAEA,QAAMY,WAAW,GAAG,YAAY;AAC5B,QAAI;AACA,YAAMC,OAAO,GAAG,MAAMR,OAAO,CAAC,YAAD,EAAc,KAAd,EAAoB,IAApB,EAAyB;AAACS,QAAAA,aAAa,EAAE,YAAWH;AAA3B,OAAzB,CAA7B;AACAH,MAAAA,QAAQ,CAACK,OAAD,CAAR;AACAH,MAAAA,OAAO,CAAC,KAAD,CAAP;AACA,aAAOG,OAAP;AACH,KALD,CAKE,OAAOE,CAAP,EAAU,CAAG;AAClB,GAPD;;AASAnB,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMoB,IAAI,GAAGJ,WAAW,EAAxB;AACAK,IAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACH,GAHQ,EAGP,CAACJ,WAAD,CAHO,CAAT;;AAKA,MAAGN,OAAH,EAAY;AACR,wBAAO,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,YAAP;AACH,GAtByB,CAuB9B;;;AAEI,sBACI,qCADJ;AAKH,CA9BM;;GAAMF,Q;UACiBH,O;;;KADjBG,Q","sourcesContent":["import React,{useEffect,useState,useCallback,useContext} from \"react\"\r\nimport {AuthContext} from \"../context/AuthContext\"\r\nimport {useHttp} from \"../hooks/http.hook\"\r\nimport {Loader} from \"./components/Loader\"\r\nimport {TextListCards} from \"./components/TextListCards\"\r\n\r\nexport const ShowText = () => {\r\n    const {request,loading} = useHttp()\r\n    const {texts,setTexts} = useState(null)\r\n    const {wait,setWait} = useState(true)\r\n    const {token} = useContext(AuthContext)\r\n\r\n    const getAllTexts = async () => {\r\n        try {\r\n            const fetched = await request('/api/text/','GET',null,{Authorization: 'Bearer '+ token})\r\n            setTexts(fetched)\r\n            setWait(false)\r\n            return fetched\r\n        } catch (e) { }\r\n    }\r\n\r\n    useEffect(() => {\r\n        const data = getAllTexts()\r\n        console.log(data)\r\n    },[getAllTexts])\r\n\r\n    if(loading) {\r\n        return <Loader />\r\n    }\r\n//  {!loading && <TextListCards texts={texts} />}\r\n\r\n    return (\r\n        <>\r\n\r\n        </>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}