{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useCallback } from 'react';\nexport const useHttp = () => {\n  _s();\n\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const request = useCallback(async (url, method = 'GET', body = null, headers = {}) => {\n    setLoading(true);\n\n    try {\n      if (body) {\n        body = JSON.stringify(body);\n        headers['Content-Type'] = 'application/json';\n      }\n\n      const response = await fetch(url, {\n        method,\n        body,\n        headers\n      });\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(data.message || 'Request throwing is wrong!');\n      }\n\n      setLoading(false);\n      return data;\n    } catch (e) {\n      console.log(e.message);\n      setLoading(false);\n      setError(e.message);\n      throw e;\n    }\n  }, []);\n  const clearError = useCallback(() => setError(null), []);\n  return {\n    loading,\n    request,\n    error,\n    clearError\n  };\n};\n\n_s(useHttp, \"BxfnnOpcEdsNOomXU7I1ddLbL3o=\");","map":{"version":3,"sources":["C:/Users/kuany/WebstormProjects/myproject/client/src/hooks/http.hook.js"],"names":["useState","useCallback","useHttp","loading","setLoading","error","setError","request","url","method","body","headers","JSON","stringify","response","fetch","data","json","ok","Error","message","e","console","log","clearError"],"mappings":";;AAAA,SAAQA,QAAR,EAAiBC,WAAjB,QAAmC,OAAnC;AAEA,OAAO,MAAMC,OAAO,GAAG,MAAM;AAAA;;AACzB,QAAM,CAACC,OAAD,EAASC,UAAT,IAAuBJ,QAAQ,CAAC,KAAD,CAArC;AACA,QAAM,CAACK,KAAD,EAAOC,QAAP,IAAmBN,QAAQ,CAAC,IAAD,CAAjC;AAEA,QAAMO,OAAO,GAAGN,WAAW,CAAC,OAAOO,GAAP,EAAWC,MAAM,GAAG,KAApB,EAA2BC,IAAI,GAAG,IAAlC,EAAwCC,OAAO,GAAG,EAAlD,KAAyD;AACjFP,IAAAA,UAAU,CAAC,IAAD,CAAV;;AACA,QAAI;AACA,UAAGM,IAAH,EAAS;AACLA,QAAAA,IAAI,GAAGE,IAAI,CAACC,SAAL,CAAeH,IAAf,CAAP;AACAC,QAAAA,OAAO,CAAC,cAAD,CAAP,GAA0B,kBAA1B;AACH;;AACD,YAAMG,QAAQ,GAAG,MAAMC,KAAK,CAACP,GAAD,EAAM;AAACC,QAAAA,MAAD;AAAQC,QAAAA,IAAR;AAAaC,QAAAA;AAAb,OAAN,CAA5B;AACA,YAAMK,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;;AAEA,UAAG,CAACH,QAAQ,CAACI,EAAb,EAAiB;AACb,cAAM,IAAIC,KAAJ,CAAUH,IAAI,CAACI,OAAL,IAAgB,4BAA1B,CAAN;AACH;;AACDhB,MAAAA,UAAU,CAAC,KAAD,CAAV;AACA,aAAOY,IAAP;AACH,KAbD,CAaE,OAAOK,CAAP,EAAU;AACRC,MAAAA,OAAO,CAACC,GAAR,CAAYF,CAAC,CAACD,OAAd;AACAhB,MAAAA,UAAU,CAAC,KAAD,CAAV;AACAE,MAAAA,QAAQ,CAACe,CAAC,CAACD,OAAH,CAAR;AACA,YAAMC,CAAN;AACH;AACJ,GArB0B,EAqBzB,EArByB,CAA3B;AAuBA,QAAMG,UAAU,GAAGvB,WAAW,CAAC,MAAMK,QAAQ,CAAC,IAAD,CAAf,EAAsB,EAAtB,CAA9B;AACA,SAAO;AAACH,IAAAA,OAAD;AAAUI,IAAAA,OAAV;AAAmBF,IAAAA,KAAnB;AAA0BmB,IAAAA;AAA1B,GAAP;AACH,CA7BM;;GAAMtB,O","sourcesContent":["import {useState,useCallback} from 'react'\r\n\r\nexport const useHttp = () => {\r\n    const [loading,setLoading] = useState(false)\r\n    const [error,setError] = useState(null)\r\n\r\n    const request = useCallback(async (url,method = 'GET', body = null, headers = {}) => {\r\n        setLoading(true)\r\n        try {\r\n            if(body) {\r\n                body = JSON.stringify(body)\r\n                headers['Content-Type'] = 'application/json'\r\n            }\r\n            const response = await fetch(url, {method,body,headers})\r\n            const data = await response.json()\r\n\r\n            if(!response.ok) {\r\n                throw new Error(data.message || 'Request throwing is wrong!')\r\n            }\r\n            setLoading(false)\r\n            return data\r\n        } catch (e) {\r\n            console.log(e.message)\r\n            setLoading(false)\r\n            setError(e.message)\r\n            throw e\r\n        }\r\n    },[])\r\n\r\n    const clearError = useCallback(() => setError(null),[])\r\n    return {loading, request, error, clearError}\r\n}"]},"metadata":{},"sourceType":"module"}