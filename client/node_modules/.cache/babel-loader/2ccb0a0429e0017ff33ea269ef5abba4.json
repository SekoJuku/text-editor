{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kuany\\\\WebstormProjects\\\\myproject\\\\client\\\\src\\\\pages\\\\ShowText.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useCallback, useContext } from \"react\";\nimport { AuthContext } from \"../context/AuthContext\";\nimport { useHttp } from \"../hooks/http.hook\";\nimport { Loader } from \"./components/Loader\";\nimport { TextList } from \"./components/TextList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const ShowText = () => {\n  _s();\n\n  const {\n    token\n  } = useContext(AuthContext);\n  const [data, setData] = useState([]);\n  const {\n    request,\n    loading\n  } = useHttp();\n  const fetchTexts = useCallback(async () => {\n    try {\n      const fetched = await request('/api/text', 'GET', null, {\n        Authorization: `Bearer ${token}`\n      });\n      setData(fetched);\n    } catch (e) {}\n  }, [request, token]);\n  useEffect(() => {\n    fetchTexts();\n  }, [fetchTexts]);\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 16\n    }, this);\n  } // <p className=\"center\">{(data?data:'No Data')}</p>\n\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(TextList, {\n      texts: data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 11\n    }, this)\n  }, void 0, false);\n};\n\n_s(ShowText, \"hGVTzgW86lAy2LeBhCspwXVxuwg=\", false, function () {\n  return [useHttp];\n});\n\n_c = ShowText;\n\nvar _c;\n\n$RefreshReg$(_c, \"ShowText\");","map":{"version":3,"sources":["C:/Users/kuany/WebstormProjects/myproject/client/src/pages/ShowText.js"],"names":["React","useEffect","useState","useCallback","useContext","AuthContext","useHttp","Loader","TextList","ShowText","token","data","setData","request","loading","fetchTexts","fetched","Authorization","e"],"mappings":";;;AAAA,OAAOA,KAAP,IAAcC,SAAd,EAAwBC,QAAxB,EAAiCC,WAAjC,EAA6CC,UAA7C,QAA8D,OAA9D;AACA,SAAQC,WAAR,QAA0B,wBAA1B;AACA,SAAQC,OAAR,QAAsB,oBAAtB;AACA,SAAQC,MAAR,QAAqB,qBAArB;AACA,SAAQC,QAAR,QAAuB,uBAAvB;;;AAEA,OAAO,MAAMC,QAAQ,GAAG,MAAM;AAAA;;AAC1B,QAAM;AAACC,IAAAA;AAAD,MAAUN,UAAU,CAACC,WAAD,CAA1B;AACA,QAAM,CAACM,IAAD,EAAMC,OAAN,IAAiBV,QAAQ,CAAC,EAAD,CAA/B;AACA,QAAM;AAACW,IAAAA,OAAD;AAASC,IAAAA;AAAT,MAAoBR,OAAO,EAAjC;AAGA,QAAMS,UAAU,GAAGZ,WAAW,CAAE,YAAY;AACxC,QAAI;AACA,YAAMa,OAAO,GAAG,MAAMH,OAAO,CAAC,WAAD,EAAa,KAAb,EAAmB,IAAnB,EAAwB;AACjDI,QAAAA,aAAa,EAAG,UAASP,KAAM;AADkB,OAAxB,CAA7B;AAGAE,MAAAA,OAAO,CAACI,OAAD,CAAP;AACH,KALD,CAKE,OAAOE,CAAP,EAAU,CAAG;AAClB,GAP6B,EAO5B,CAACL,OAAD,EAASH,KAAT,CAP4B,CAA9B;AASAT,EAAAA,SAAS,CAAC,MAAM;AACZc,IAAAA,UAAU;AACb,GAFQ,EAEP,CAACA,UAAD,CAFO,CAAT;;AAIA,MAAGD,OAAH,EAAY;AACR,wBAAO,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,YAAP;AACH,GArByB,CAuB9B;;;AACI,sBACI;AAAA,2BACE,QAAC,QAAD;AAAU,MAAA,KAAK,EAAEH;AAAjB;AAAA;AAAA;AAAA;AAAA;AADF,mBADJ;AAMH,CA9BM;;GAAMF,Q;UAGiBH,O;;;KAHjBG,Q","sourcesContent":["import React,{useEffect,useState,useCallback,useContext} from \"react\"\r\nimport {AuthContext} from \"../context/AuthContext\"\r\nimport {useHttp} from \"../hooks/http.hook\"\r\nimport {Loader} from \"./components/Loader\"\r\nimport {TextList} from \"./components/TextList\"\r\n\r\nexport const ShowText = () => {\r\n    const {token} = useContext(AuthContext)\r\n    const [data,setData] = useState([])\r\n    const {request,loading} = useHttp()\r\n\r\n\r\n    const fetchTexts = useCallback( async () => {\r\n        try {\r\n            const fetched = await request('/api/text','GET',null,{\r\n                Authorization: `Bearer ${token}`\r\n            })\r\n            setData(fetched)\r\n        } catch (e) { }\r\n    },[request,token])\r\n\r\n    useEffect(() => {\r\n        fetchTexts()\r\n    },[fetchTexts])\r\n\r\n    if(loading) {\r\n        return <Loader/>\r\n    }\r\n\r\n// <p className=\"center\">{(data?data:'No Data')}</p>\r\n    return (\r\n        <>\r\n          <TextList texts={data} />\r\n        </>\r\n    )\r\n\r\n}"]},"metadata":{},"sourceType":"module"}