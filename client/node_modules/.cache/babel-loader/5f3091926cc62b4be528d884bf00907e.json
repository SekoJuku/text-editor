{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kuany\\\\WebstormProjects\\\\myproject\\\\client\\\\src\\\\pages\\\\ShowText.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useCallback, useContext } from \"react\";\nimport { AuthContext } from \"../context/AuthContext\";\nimport { useHttp } from \"../hooks/http.hook\";\nimport { Loader } from \"./components/Loader\";\nimport { TextListCards } from \"./components/TextListCards\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const ShowText = () => {\n  _s();\n\n  const {\n    request,\n    loading\n  } = useHttp();\n  const {\n    texts,\n    setTexts\n  } = useState([]);\n  const {\n    token\n  } = useContext(AuthContext);\n  const getAllTexts = useCallback(async () => {\n    try {\n      const fetched = await request('/api/text', 'GET', null, {\n        Authorization: `Bearer ${token}`\n      });\n      console.log(fetched);\n      setTexts(fetched);\n    } catch (e) {}\n  }, [token, request]);\n  useEffect(() => {\n    getAllTexts();\n    console.log('Text ', texts);\n  }, [getAllTexts]);\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 16\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: !loading && /*#__PURE__*/_jsxDEV(TextListCards, {\n      texts: {\n        texts\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 26\n    }, this)\n  }, void 0, false);\n};\n\n_s(ShowText, \"XMBNvWrROeCvsXZ+sccqxQBLQwE=\", false, function () {\n  return [useHttp];\n});\n\n_c = ShowText;\n\nvar _c;\n\n$RefreshReg$(_c, \"ShowText\");","map":{"version":3,"sources":["C:/Users/kuany/WebstormProjects/myproject/client/src/pages/ShowText.js"],"names":["React","useEffect","useState","useCallback","useContext","AuthContext","useHttp","Loader","TextListCards","ShowText","request","loading","texts","setTexts","token","getAllTexts","fetched","Authorization","console","log","e"],"mappings":";;;AAAA,OAAOA,KAAP,IAAcC,SAAd,EAAwBC,QAAxB,EAAiCC,WAAjC,EAA6CC,UAA7C,QAA8D,OAA9D;AACA,SAAQC,WAAR,QAA0B,wBAA1B;AACA,SAAQC,OAAR,QAAsB,oBAAtB;AACA,SAAQC,MAAR,QAAqB,qBAArB;AACA,SAAQC,aAAR,QAA4B,4BAA5B;;;AAEA,OAAO,MAAMC,QAAQ,GAAG,MAAM;AAAA;;AAC1B,QAAM;AAACC,IAAAA,OAAD;AAAUC,IAAAA;AAAV,MAAqBL,OAAO,EAAlC;AACA,QAAM;AAACM,IAAAA,KAAD;AAAQC,IAAAA;AAAR,MAAoBX,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM;AAACY,IAAAA;AAAD,MAAUV,UAAU,CAACC,WAAD,CAA1B;AAEA,QAAMU,WAAW,GAAGZ,WAAW,CAAC,YAAY;AACxC,QAAI;AACA,YAAMa,OAAO,GAAG,MAAMN,OAAO,CAAC,WAAD,EAAa,KAAb,EAAmB,IAAnB,EAAwB;AAACO,QAAAA,aAAa,EAAG,UAASH,KAAM;AAAhC,OAAxB,CAA7B;AACAI,MAAAA,OAAO,CAACC,GAAR,CAAYH,OAAZ;AACAH,MAAAA,QAAQ,CAACG,OAAD,CAAR;AAEH,KALD,CAKE,OAAOI,CAAP,EAAU,CAAG;AAClB,GAP8B,EAO7B,CAACN,KAAD,EAAOJ,OAAP,CAP6B,CAA/B;AASAT,EAAAA,SAAS,CAAC,MAAM;AACZc,IAAAA,WAAW;AACXG,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBP,KAArB;AACH,GAHQ,EAGP,CAACG,WAAD,CAHO,CAAT;;AAKA,MAAIJ,OAAJ,EAAa;AACT,wBAAO,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,YAAP;AACH;;AAED,sBACI;AAAA,cACK,CAACA,OAAD,iBAAY,QAAC,aAAD;AAAe,MAAA,KAAK,EAAE;AAACC,QAAAA;AAAD;AAAtB;AAAA;AAAA;AAAA;AAAA;AADjB,mBADJ;AAKH,CA5BM;;GAAMH,Q;UACkBH,O;;;KADlBG,Q","sourcesContent":["import React,{useEffect,useState,useCallback,useContext} from \"react\"\r\nimport {AuthContext} from \"../context/AuthContext\"\r\nimport {useHttp} from \"../hooks/http.hook\"\r\nimport {Loader} from \"./components/Loader\"\r\nimport {TextListCards} from \"./components/TextListCards\"\r\n\r\nexport const ShowText = () => {\r\n    const {request, loading} = useHttp()\r\n    const {texts, setTexts} = useState([])\r\n    const {token} = useContext(AuthContext)\r\n\r\n    const getAllTexts = useCallback(async () => {\r\n        try {\r\n            const fetched = await request('/api/text','GET',null,{Authorization: `Bearer ${token}`})\r\n            console.log(fetched)\r\n            setTexts(fetched)\r\n\r\n        } catch (e) { }\r\n    },[token,request])\r\n\r\n    useEffect(() => {\r\n        getAllTexts()\r\n        console.log('Text ', texts)\r\n    },[getAllTexts])\r\n\r\n    if (loading) {\r\n        return <Loader/>\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {!loading && <TextListCards texts={{texts}}/>}\r\n        </>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}