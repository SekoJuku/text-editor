{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kuany\\\\WebstormProjects\\\\myproject\\\\client\\\\src\\\\pages\\\\TextList.js\",\n    _s = $RefreshSig$();\n\nimport { React, useCallback, useState, useEffect, useContext } from 'react';\nimport { AuthContext } from \"../context/AuthContext\";\nimport { useHttp } from \"../hooks/http.hook\";\nimport { Loader } from \"./components/Loader\";\nimport { Text } from \"./components/Text\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const TextList = () => {\n  _s();\n\n  const {\n    token\n  } = useContext(AuthContext); //const [id,setId] = useState(null)\n\n  const [texts, setTexts] = useState({});\n  const [newText, setNewText] = useState({});\n  const [update, setUpdate] = useState(false);\n  const fetchTexts = useCallback(async () => {\n    try {\n      let fetched = await request('/api/text', 'GET', null, {\n        Authorization: `Bearer ${token}`\n      });\n      console.log(fetched);\n      setTexts(fetched);\n    } catch (e) {}\n  }, [request, token]);\n  useEffect(() => {\n    window.M.updateTextFields();\n  }, []);\n  useEffect(() => {\n    fetchTexts();\n  }, [fetchTexts, update]);\n\n  const changeHandler = event => {\n    const target = event.target;\n    const value = target.value;\n    setNewText({ ...newText,\n      [target.name]: value\n    });\n    console.log(newText);\n  };\n\n  const deleteHandler = useCallback(async id => {\n    console.log(newText);\n\n    try {\n      let data = await request(`api/text/delete/${id}`, 'DELETE', null, {\n        Authorization: `Bearer ${token}`\n      });\n    } catch (e) {}\n  }, [request, token, update]);\n  const editHandler = useCallback(async id => {}, [request, token, update]);\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 16\n    }, this);\n  }\n\n  if (!texts.length) {\n    return /*#__PURE__*/_jsxDEV(\"h5\", {\n      className: \"center\",\n      children: \"No Texts. Create one!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 16\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"table\", {\n    children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n      children: /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"\\u2116\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Action\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n      children: texts.map((text, i) => {\n        return /*#__PURE__*/_jsxDEV(Text, {\n          item: text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 21\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 9\n  }, this);\n};\n\n_s(TextList, \"AzKiBeiQLyyMWkDtnUSbLTuEyrs=\");\n\n_c = TextList;\n\nvar _c;\n\n$RefreshReg$(_c, \"TextList\");","map":{"version":3,"sources":["C:/Users/kuany/WebstormProjects/myproject/client/src/pages/TextList.js"],"names":["React","useCallback","useState","useEffect","useContext","AuthContext","useHttp","Loader","Text","TextList","token","texts","setTexts","newText","setNewText","update","setUpdate","fetchTexts","fetched","request","Authorization","console","log","e","window","M","updateTextFields","changeHandler","event","target","value","name","deleteHandler","id","data","editHandler","loading","length","map","text","i"],"mappings":"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","sourcesContent":["import {React,useCallback,useState,useEffect,useContext} from 'react'\r\nimport {AuthContext} from \"../context/AuthContext\";\r\nimport {useHttp} from \"../hooks/http.hook\";\r\nimport {Loader} from \"./components/Loader\";\r\nimport {Text} from \"./components/Text\";\r\n\r\n\r\nexport const TextList = () => {\r\n    const {token} = useContext(AuthContext)\r\n    //const [id,setId] = useState(null)\r\n    const [texts,setTexts] = useState({})\r\n    const [newText,setNewText] = useState({})\r\n    const [update,setUpdate] = useState(false)\r\n\r\n\r\n    const fetchTexts = useCallback( async () => {\r\n        try {\r\n            let fetched = await request('/api/text','GET',null,{\r\n                Authorization: `Bearer ${token}`\r\n            })\r\n            console.log(fetched)\r\n            setTexts(fetched)\r\n        } catch (e) { }\r\n    },[request,token])\r\n\r\n    useEffect(() => {\r\n        window.M.updateTextFields()\r\n    },[])\r\n\r\n    useEffect(() => {\r\n        fetchTexts()\r\n    },[fetchTexts,update])\r\n\r\n\r\n    const changeHandler = (event) => {\r\n        const target = event.target\r\n        const value = target.value\r\n        setNewText({\r\n            ...newText,\r\n            [target.name]: value\r\n        })\r\n        console.log(newText)\r\n    }\r\n\r\n    const deleteHandler = useCallback(async (id) => {\r\n        console.log(newText)\r\n        try {\r\n            let data = await request(`api/text/delete/${id}`,'DELETE',null,{Authorization: `Bearer ${token}`})\r\n        } catch (e) { }\r\n    },[request,token,update])\r\n\r\n    const editHandler = useCallback( async  (id) => {\r\n\r\n    },[request,token,update])\r\n\r\n    if(loading) {\r\n        return <Loader />\r\n    }\r\n\r\n    if(!texts.length) {\r\n        return <h5 className=\"center\">No Texts. Create one!</h5>\r\n    }\r\n\r\n    return(\r\n        <table>\r\n            <thead>\r\n            <tr>\r\n                <th>â„–</th>\r\n                <th>Text</th>\r\n                <th>Action</th>\r\n            </tr>\r\n            </thead>\r\n            <tbody>\r\n            {texts.map((text,i) => {\r\n                return (\r\n                    <Text item={text} />\r\n                )\r\n            })\r\n            }\r\n            </tbody>\r\n        </table>\r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}